// Code generated by MockGen. DO NOT EDIT.
// Source: ./ad.go

// Package repoMock is a generated GoMock package.
package repoMock

import (
	context "context"
	models "homework10/internal/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdRepository is a mock of AdRepository interface.
type MockAdRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdRepositoryMockRecorder
}

// MockAdRepositoryMockRecorder is the mock recorder for MockAdRepository.
type MockAdRepositoryMockRecorder struct {
	mock *MockAdRepository
}

// NewMockAdRepository creates a new mock instance.
func NewMockAdRepository(ctrl *gomock.Controller) *MockAdRepository {
	mock := &MockAdRepository{ctrl: ctrl}
	mock.recorder = &MockAdRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdRepository) EXPECT() *MockAdRepositoryMockRecorder {
	return m.recorder
}

// AddAd mocks base method.
func (m *MockAdRepository) AddAd(ctx context.Context, ad models.Ad) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAd", ctx, ad)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAd indicates an expected call of AddAd.
func (mr *MockAdRepositoryMockRecorder) AddAd(ctx, ad interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAd", reflect.TypeOf((*MockAdRepository)(nil).AddAd), ctx, ad)
}

// DeleteAd mocks base method.
func (m *MockAdRepository) DeleteAd(ctx context.Context, adID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAd", ctx, adID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAd indicates an expected call of DeleteAd.
func (mr *MockAdRepositoryMockRecorder) DeleteAd(ctx, adID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAd", reflect.TypeOf((*MockAdRepository)(nil).DeleteAd), ctx, adID)
}

// GetAd mocks base method.
func (m *MockAdRepository) GetAd(ctx context.Context, adID int64) (*models.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAd", ctx, adID)
	ret0, _ := ret[0].(*models.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAd indicates an expected call of GetAd.
func (mr *MockAdRepositoryMockRecorder) GetAd(ctx, adID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAd", reflect.TypeOf((*MockAdRepository)(nil).GetAd), ctx, adID)
}

// GetAds mocks base method.
func (m *MockAdRepository) GetAds(ctx context.Context) ([]*models.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAds", ctx)
	ret0, _ := ret[0].([]*models.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAds indicates an expected call of GetAds.
func (mr *MockAdRepositoryMockRecorder) GetAds(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAds", reflect.TypeOf((*MockAdRepository)(nil).GetAds), ctx)
}

// SetStatus mocks base method.
func (m *MockAdRepository) SetStatus(ctx context.Context, adID int64, published bool) (*models.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", ctx, adID, published)
	ret0, _ := ret[0].(*models.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockAdRepositoryMockRecorder) SetStatus(ctx, adID, published interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockAdRepository)(nil).SetStatus), ctx, adID, published)
}

// Update mocks base method.
func (m *MockAdRepository) Update(ctx context.Context, adID int64, title, text string) (*models.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, adID, title, text)
	ret0, _ := ret[0].(*models.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAdRepositoryMockRecorder) Update(ctx, adID, title, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAdRepository)(nil).Update), ctx, adID, title, text)
}
